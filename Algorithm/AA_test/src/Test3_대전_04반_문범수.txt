1. 병합 정렬의 의사코드 또는 Java코드를 작성하라.

void merge(int left, int right){
	if(left < right){
		int mid = (left + right) / 2;
		merge(left, mid); // 왼쪽부분부터 나누기 시작
		merge(mid, right); // 오른쪽 부분 이어서 나누기 시작
		mergeSort(left, mid, right); // 정렬 시작
	}
}

void mergeSort(int left, int mid, int right){
	int L = left;
	int R = right;
	
	while(L <= R){
			
	
	
	}
}


2. 퀵 정렬의 의사코드 또는 Java코드를 작성하라.
void quickSort(int left, int right, int pivot){
	if(left < right){
		pivot = partition(left, right); // pivot 선 탐색
		quickSort(left, pivot - 1); // pivot 기준 왼쪽 부분 정렬
		quickSort(pivot + 1, right); // pivot 기준 오른쪽 부분 정렬
	}
}

int partition(int left, int right){
	int L = left;
	int R = right;
	pivot = left;
	
	while(L < arr[pivot]){
		L++; // pivot의 값보다 큰 인자를 만날때 까지 L 증가
	}
	
	while(R > arr[pivot]){
		R++; // pivot의 값보다 작은 인자를 만날때 까지 R 감소
	}
	
	
	
	

	return R;
}


3. 병합 정렬과 퀵 정렬의 특징과 차이점을 서술하라.
병합 정렬은 배열을 각 부분집합으로 나눈 뒤 정렬과 동시에 합하는 과정을 취한다.
각 부분집합의 크기는 기존 크기의 절반씩 줄어든다.
나누는 과정은 top-down 방식을 보이고, 합하는 과정은 bottom-up 방식을 보이며, nlogn의 시간복잡도를 가진다.

Quick 정렬은 pivot 이라는 기준점을 기준으로 왼쪽은 작은 값이 오른쪽은 큰 값이 오게하는 방식이다.
유동적으로 pivot의 위치가 변하기 때문에 비정렬 부분의 빠른 switch가 가능해 현재까지 알려진 방식 중 가장 빠른 방식이다.
mergeSort와 다르게 항상 절반씩 배열이 나눠지는 게 아닌 가변적인 크기의 분할이 이루어진다.


4. 퀵 정렬이 가장 시간 복잡도가 커지는, 최악의 상황에 대해 서술하라.
모든 정렬이 이미 이루어진 상황에 대해서는 모든 배열을 순차적으로 돌며 확인해야 하기 때문에 
시간복잡도는 N^N이 된다.


